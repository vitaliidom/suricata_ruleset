alert udp $LOLKA_SERVER any -> $GOOGLE_DNS any (msg:"UDP traffic from $LOLKA_SERVER detected"; sid:1000001; rev:1;)

alert tcp $LOLKA_SERVER any -> $GITLAB_RUNNER_TEST 22 (msg:"TCP traffic from $LOLKA_SERVER detected"; sid:1000002; rev:1;)

alert icmp $LOLKA_SERVER any -> $GOOGLE_DNS any (msg:"ICMP traffic from $LOLKA_SERVER detected"; sid:1000003; rev:2;)

alert udp $DNS_SERVERS !$DNS_SERVER_PORTS -> !$DNS_ALLOWED_SERVERS !$DNS_SERVER_PORTS (msg:"UDP traffic from $DNS_SERVERS detected"; sid:1000004; rev:1;)

alert tcp $DNS_SERVERS !$DNS_SERVER_PORTS -> !$DNS_ALLOWED_SERVERS !$DNS_SERVER_PORTS (msg:"TCP traffic from $DNS_SERVERS detected"; sid:1000005; rev:1;)

alert icmp $DNS_SERVERS any -> !$DNS_ALLOWED_SERVERS any (msg:"ICMP traffic from $DNS_SERVERS detected"; sid:1000006; rev:2;)

alert udp $STATUS_SERVERS any -> !$STATUS_ALLOWED_SERVERS !$STATUS_ALLOWED_PORTS (msg:"UDP traffic from $STATUS_SERVERS detected"; sid:1000007; rev:1;)

alert tcp $STATUS_SERVERS any -> !$STATUS_ALLOWED_SERVERS !$STATUS_ALLOWED_PORTS (msg:"TCP traffic from $STATUS_SERVERS detected"; sid:1000008; rev:1;)

alert icmp $STATUS_SERVERS any -> any any (msg:"ICMP traffic from $STATUS_SERVERS detected"; sid:1000009; rev:1;)

alert udp $BTW_SERVERS any -> !$BTW_ALLOWED_SERVERS !$BTW_ALLOWED_PORTS (msg:"UDP traffic from $BTW_SERVERS detected"; sid:1000010; rev:1;)

alert tcp $BTW_SERVERS !$BTW_ALLOWED_PORTS -> !$BTW_ALLOWED_SERVERS !$BTW_ALLOWED_PORTS (msg:"TCP traffic from $BTW_SERVERS detected"; sid:1000011; rev:1;)

alert icmp $BTW_SERVERS any -> !$PING_ALLOWED any (msg:"ICMP traffic from $BTW_SERVERS detected"; sid:1000012; rev:1;)

alert tcp $WAZUH_SERVERS !$WAZUH_ALLOWED_PORTS -> !$WAZUH_ALLOWED_SERVERS !$WAZUH_ALLOWED_PORTS (msg:"TCP traffic from $WAZUH_SERVERS detected"; sid:1000013; rev:1;)

alert udp $WAZUH_SERVERS any -> !$WAZUH_ALLOWED_SERVERS !$WAZUH_ALLOWED_PORTS (msg:"UDP traffic from $WAZUH_SERVERS detected"; sid:1000014; rev:1;)

alert icmp $WAZUH_SERVERS any -> !$PING_ALLOWED any (msg:"ICMP traffic from $WAZUH_SERVERS detected"; sid:1000015; rev:1;)

alert tcp $NGINX_SERVERS !$NGINX_ALLOWED_PORTS -> !$NGINX_ALLOWED_SERVERS !$NGINX_ALLOWED_PORTS (msg:"TCP traffic from $NGINX_SERVERS detected"; sid:1000016; rev:1;)

alert udp $NGINX_SERVERS any -> !$NGINX_ALLOWED_SERVERS !$NGINX_ALLOWED_PORTS (msg:"UDP traffic from $NGINX_SERVERS detected"; sid:1000017; rev:1;)

alert icmp $NGINX_SERVERS any -> !$PING_ALLOWED any (msg:"ICMP traffic from $NGINX_SERVERS detected"; sid:1000018; rev:1;)

#alert tcp $GITLAB_RUNNERS any -> !$GITLAB_RUNNERS_ALLOWED !$GITLAB_RUNNERS_ALLOWED_PORTS (msg:"TCP traffic from $GITLAB_RUNNERS detected"; sid:1000019; rev:1;)

#alert udp $GITLAB_RUNNERS any -> !$GITLAB_RUNNERS_ALLOWED !$GITLAB_RUNNERS_ALLOWED_PORTS (msg:"UDP traffic from $GITLAB_RUNNERS detected"; sid:1000020; rev:1;)

#alert icmp $GITLAB_RUNNERS any -> !$GITLAB_RUNNERS_ALLOWED any (msg:"ICMP traffic from $GITLAB_RUNNERS detected"; sid:1000021; rev:1;)

alert tcp $GITLAB_SERVERS any -> !$GITLAB_SERVERS_ALLOWED !$GITLAB_SERVERS_ALLOWED_PORTS (msg:"TCP traffic from $GITLAB_SERVERS detected"; sid:1000022; rev:1;)

alert udp $GITLAB_SERVERS any -> !$GITLAB_SERVERS_ALLOWED !$GITLAB_SERVERS_ALLOWED_PORTS (msg:"UDP traffic from $GITLAB_SERVERS detected"; sid:1000023; rev:1;)

alert icmp $GITLAB_SERVERS any -> !$GITLAB_SERVERS_ALLOWED any (msg:"ICMP traffic from $GITLAB_SERVERS detected"; sid:1000024; rev:1;)

alert tcp $AIM_CHAT_WP any -> !$AIM_CHAT_WP_ALLOWED !$AIM_CHAT_WP_ALLOWED_PORTS (msg:"TCP traffic from $AIM_CHAT_WP detected"; sid:1000025; rev:1;)

alert udp $AIM_CHAT_WP any -> !$AIM_CHAT_WP_ALLOWED !$AIM_CHAT_WP_ALLOWED_PORTS (msg:"UDP traffic from $AIM_CHAT_WP detected"; sid:1000026; rev:1;)

alert icmp $AIM_CHAT_WP any -> !$AIM_CHAT_WP_ALLOWED any (msg:"ICMP traffic from $AIM_CHAT_WP detected"; sid:1000027; rev:1;)

alert tcp $WP_TANDEMWARE_PROD any -> !$WP_TANDEMWARE_PROD_ALLOWED !$WP_TANDEMWARE_PROD_ALLOWED_PORTS (msg:"TCP traffic from $WP_TANDEMWARE_PROD detected"; sid:1000028; rev:1;)

alert udp $WP_TANDEMWARE_PROD any -> !$WP_TANDEMWARE_PROD_ALLOWED !$WP_TANDEMWARE_PROD_ALLOWED_PORTS (msg:"UDP traffic from $WP_TANDEMWARE_PROD detected"; sid:1000029; rev:1;)

alert icmp $WP_TANDEMWARE_PROD any -> !$WP_TANDEMWARE_PROD_ALLOWED any (msg:"ICMP traffic from $WP_TANDEMWARE_PROD detected"; sid:1000030; rev:1;)

alert tcp $WP_AIMPROTECH_PROD any -> !$WP_AIMPROTECH_PROD_ALLOWED !$WP_AIMPROTECH_PROD_ALLOWED_PORTS (msg:"TCP traffic from $WP_AIMPROTECH_PROD detected"; sid:1000031; rev:1;)

alert udp $WP_AIMPROTECH_PROD any -> !$WP_AIMPROTECH_PROD_ALLOWED !$WP_AIMPROTECH_PROD_ALLOWED_PORTS (msg:"UDP traffic from $WP_AIMPROTECH_PROD detected"; sid:1000032; rev:1;)

alert icmp $WP_AIMPROTECH_PROD any -> !$WP_AIMPROTECH_PROD_ALLOWED any (msg:"ICMP traffic from $WP_AIMPROTECH_PROD detected"; sid:1000033; rev:1;)

alert tcp $WP_FRANKTEK_PROD any -> !$WP_FRANKTEK_PROD_ALLOWED !$WP_FRANKTEK_PROD_ALLOWED_PORTS (msg:"TCP traffic from $WP_FRANKTEK_PROD detected"; sid:1000034; rev:1;)

alert udp $WP_FRANKTEK_PROD any -> !$WP_FRANKTEK_PROD_ALLOWED !$WP_FRANKTEK_PROD_ALLOWED_PORTS (msg:"UDP traffic from $WP_FRANKTEK_PROD detected"; sid:1000035; rev:1;)

alert icmp $WP_FRANKTEK_PROD any -> !$WP_FRANKTEK_PROD_ALLOWED any (msg:"ICMP traffic from $WP_FRANKTEK_PROD detected"; sid:1000036; rev:1;)

#alert tcp $MYSQL_LUZANOV any -> !$MYSQL_LUZANOV_ALLOWED_SERVERS !$MYSQL_LUZANOV_ALLOWED_PORTS (msg:"TCP traffic from $MYSQL_LUZANOV detected"; sid:1000037; rev:1;)

#alert udp $MYSQL_LUZANOV any -> !$MYSQL_LUZANOV_ALLOWED_SERVERS !$MYSQL_LUZANOV_ALLOWED_PORTS (msg:"UDP traffic from $MYSQL_LUZANOV detected"; sid:1000038; rev:1;)

#alert icmp $MYSQL_LUZANOV any -> !$MYSQL_LUZANOV_ALLOWED_SERVERS any (msg:"ICMP traffic from $MYSQL_LUZANOV detected"; sid:1000039; rev:1;)

alert tcp $VPN_USERS_NET any -> $HOME_NET $VPN_SCANNED_PORTS (msg:"TCP traffic from $VPN_USERS_NET detected"; sid:1000040; rev:1;)

alert udp $VPN_USERS_NET any -> $HOME_NET $VPN_SCANNED_PORTS (msg:"UDP traffic from $VPN_USERS_NET detected"; sid:1000041; rev:1;)

alert icmp $VPN_USERS_NET any -> $HOME_NET any (msg:"ICMP traffic from $VPN_USERS_NET detected"; sid:1000042; rev:1;)


# opnsense-suricata-nmaps
# OPNsense's Suricata IDS/IPS Nmap Detection Rules
# v. 1.4.2 / June 8th 2023 by Aleksi Bovellan
# https://github.com/aleksibovellan/opnsense-suricata-nmaps

# For Nmap Detections between scan speeds of -T5-T0.


# Nmap -sS scans at -T0, this rule has a limited port range to avoid constant alerts from generic WAN scanners: 

alert tcp $VPN_USERS_NET any -> any [21,22,23,25,80,88,110,135,137,138,139,161,389,443,445,465,514,587,636,995,1025,1026,1027,1028,1029,1433,1720,3306,3389,5900,8443,11211,27017] (msg:"SUSP PORT PROBE KNOWN TCP (type -sS)"; flow:stateless; flags:S; window:1024; tcp.mss:1460; threshold:type threshold, track by_src, count 4, seconds 1100; classtype:attempted-recon; sid:1000901; priority:2; rev:2;)
alert tcp $VPN_USERS_NET any -> any [21,22,23,25,80,88,110,135,137,138,139,161,389,443,445,465,514,587,636,995,1025,1026,1027,1028,1029,1433,1720,3306,3389,5900,8443,11211,27017] (msg:"POSSBL SCAN NMAP KNOWN TCP (type -sS)"; flow:stateless; flags:S; window:1024; tcp.mss:1460; threshold:type threshold, track by_src, count 3, seconds 1210; classtype:attempted-recon; sid:1000902; priority:2; rev:2;)

alert tcp $VPN_USERS_NET any -> any ![21,22,23,25,80,88,110,135,137,138,139,161,389,443,445,465,514,587,636,995,1025,1026,1027,1028,1029,1433,1720,3306,3389,5900,8443,11211,27017] (msg:"SUSP PORT PROBE UNKNOWN TCP (type -sS)"; flow:stateless; flags:S; window:1024; tcp.mss:1460; threshold:type threshold, track by_src, count 4, seconds 1100; classtype:attempted-recon; sid:1000921; priority:2; rev:2;)
alert tcp $VPN_USERS_NET any -> any ![21,22,23,25,80,88,110,135,137,138,139,161,389,443,445,465,514,587,636,995,1025,1026,1027,1028,1029,1433,1720,3306,3389,5900,8443,11211,27017] (msg:"POSSBL SCAN NMAP UNKNOWN TCP (type -sS)"; flow:stateless; flags:S; window:1024; tcp.mss:1460; threshold:type threshold, track by_src, count 3, seconds 1210; classtype:attempted-recon; sid:1000922; priority:2; rev:2;)


# Nmap -sT scans at -T0, these rules were DISABLED due to false positives from legit TCP (SYN ACK) traffic, but -sT -T0 scans MIGHT POSSIBLY still be detected by other active rules at some point:

# DISABLED rule due to some false positives: alert tcp any any -> any [21,23,25,88,110,135,137,138,139,161,389,445,465,514,587,636,995,1025,1026,1027,1028,1029,1433,1720,3306,3389,5900,8443,11211,27017] (msg:"SUSP PORT PROBE KNOWN TCP (type -sT)"; flow:stateless; flags:S; window:64240; tcp.mss:1460; threshold:type threshold, track by_src, count 4, seconds 1100; classtype:attempted-recon; sid:1000903; priority:2; rev:2;)
# DISABLED rule due to some false positives: alert tcp any any -> any [21,23,25,88,110,135,137,138,139,161,389,445,465,514,587,636,995,1025,1026,1027,1028,1029,1433,1720,3306,3389,5900,8443,11211,27017] (msg:"POSSBL SCAN NMAP KNOWN TCP (type -sT)"; flow:stateless; flags:S; window:64240; tcp.mss:1460; threshold:type threshold, track by_src, count 3, seconds 1210; classtype:attempted-recon; sid:1000904; priority:2; rev:2;)


# Nmap -sU scans at -T0, this rule has a limited port range to avoid constant alerts from generic WAN scanners:

alert udp $VPN_USERS_NET any -> any [53,67,68,69,123,161,162,389,520,1026,1027,1028,1029,1434,1900,11211,12345,27017] (msg:"POSSBL SCAN NMAP KNOWN UDP (type -sU)"; flow:stateless; classtype:attempted-recon; sid:1000905; priority:2; rev:7; threshold:type limit, track by_src, count 3, seconds 1210; dsize:0;)
alert udp $VPN_USERS_NET any -> any ![53,67,68,69,123,161,162,389,520,1026,1027,1028,1029,1434,1900,11211,12345,27017] (msg:"POSSBL SCAN NMAP UNKNOWN UDP (type -sU)"; flow:stateless; classtype:attempted-recon; sid:1000925; priority:2; rev:7; threshold:type limit, track by_src, count 3, seconds 1210; dsize:0;)


# Nmap -f scans at -T0:

alert ip $VPN_USERS_NET any -> any any (msg:"POSSBL SCAN NMAP KNOWN FRAGM (type -f)"; fragbits:M+D; threshold:type limit, track by_src, count 3, seconds 1210; classtype:attempted-recon; sid:1000906; priority:2; rev:6;)
alert ip $VPN_USERS_NET any -> any any (msg:"POSSBL SCAN NMAP FRAGM (type -f)"; fragbits:M; threshold:type threshold, track by_src, count 3, seconds 1210; classtype:attempted-recon; sid:1000907; priority:2; rev:1;)


# Nmap -sS scans between -T5-T1:

alert tcp $VPN_USERS_NET any -> any [21,22,23,25,80,88,110,135,137,138,139,161,389,443,445,465,514,587,636,995,1025,1026,1027,1028,1029,1433,1720,3306,3389,5900,8443,11211,27017] (msg:"POSSBL SCAN NMAP KNOWN TCP (type -sS)"; flow:stateless; flags:S; window:1024; tcp.mss:1460; threshold:type threshold, track by_src, count 7, seconds 180; classtype:attempted-recon; sid:1000908; priority:2; rev:2;)
alert tcp $VPN_USERS_NET any -> any ![21,22,23,25,80,88,110,135,137,138,139,161,389,443,445,465,514,587,636,995,1025,1026,1027,1028,1029,1433,1720,3306,3389,5900,8443,11211,27017] (msg:"POSSBL SCAN NMAP TCP (type -sS)"; flow:stateless; flags:S; window:1024; tcp.mss:1460; threshold:type threshold, track by_src, count 7, seconds 180; classtype:attempted-recon; sid:1000909; priority:2; rev:2;)


# Nmap -sT scans between -T5-T1:

alert tcp $VPN_USERS_NET any -> any [21,22,23,25,80,88,110,135,137,138,139,161,389,443,445,465,514,587,636,995,1025,1026,1027,1028,1029,1433,1720,3306,3389,5900,8443,11211,27017] (msg:"POSSBL SCAN NMAP KNOWN TCP (type -sT)"; flow:stateless; flags:S; window:64240; tcp.mss:1460; threshold:type threshold, track by_src, count 15, seconds 60; classtype:attempted-recon; sid:1000910; priority:2; rev:4;)
alert tcp $VPN_USERS_NET any -> any ![21,22,23,25,80,88,110,135,137,138,139,161,389,443,445,465,514,587,636,995,1025,1026,1027,1028,1029,1433,1720,3306,3389,5900,8443,11211,27017] (msg:"POSSBL SCAN NMAP TCP (type -sT)"; flow:stateless; flags:S; window:64240; tcp.mss:1460; threshold:type threshold, track by_src, count 15, seconds 60; classtype:attempted-recon; sid:1000911; priority:2; rev:4;)


# Nmap -sU scans between -T5-T1:

alert udp $VPN_USERS_NET any -> any [53,67,68,69,123,161,162,389,520,1026,1027,1028,1029,1434,1900,11211,12345,27017] (msg:"POSSBL SCAN NMAP KNOWN UDP (type -sU)"; flow:stateless; classtype:attempted-recon; sid:1000912; priority:2; rev:7; threshold:type limit, track by_src, count 10, seconds 300; dsize:0;)
alert udp $VPN_USERS_NET any -> any ![53,67,68,69,123,161,162,389,520,1026,1027,1028,1029,1434,1900,11211,12345,27017] (msg:"POSSBL SCAN NMAP UDP (type -sU)"; flow:stateless; classtype:attempted-recon; sid:1000913; priority:2; rev:6; threshold:type threshold, track by_src, count 10, seconds 300; dsize:0;)


# Nmap -f scans between -T5-T1:

alert ip $VPN_USERS_NET any -> any any (msg:"POSSBL SCAN NMAP KNOWN FRAGM (type -f)"; fragbits:M+D; threshold:type limit, track by_src, count 20, seconds 1200; classtype:attempted-recon; sid:1000914; priority:2; rev:6;)
alert ip $VPN_USERS_NET any -> any any (msg:"POSSBL SCAN NMAP FRAGM (type -f)"; fragbits:M; threshold:type threshold, track by_src, count 20, seconds 1200; classtype:attempted-recon; sid:1000915; priority:2; rev:1;)


# MetaSploit / Meterpreter / NetCat associated port 4444 connection attempts:

# TCP source port: 4444
alert tcp $VPN_USERS_NET 4444 -> any any (msg:"POSSBL SCAN M-SPLOIT R.SHELL TCP"; classtype:trojan-activity; sid:1100016; priority:1; rev:1;)

# UDP source port: 4444
alert udp $VPN_USERS_NET 4444 -> any any (msg:"POSSBL SCAN M-SPLOIT R.SHELL UDP"; classtype:trojan-activity; sid:1100017; priority:1; rev:1;)

# TCP destination port: 4444
alert tcp $VPN_USERS_NET any -> any 4444 (msg:"POSSBL SCAN M-SPLOIT B.SHELL TCP"; classtype:trojan-activity; sid:1100018; priority:1; rev:2;)

# UDP destination port: 4444
alert udp $VPN_USERS_NET any -> any 4444 (msg:"POSSBL SCAN M-SPLOIT B.SHELL UDP"; classtype:trojan-activity; sid:1100019; priority:1; rev:2;)
